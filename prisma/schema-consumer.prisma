generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "darwin-arm64"]
  output        = "./generated/consumer"
}

datasource db {
  provider = "postgresql"
  url      = env("consumer_DATABASE_URI")
}

enum StatusType {
  ACTIVE    @map("ACTIVE")
  DE_ACTIVE @map("DE_ACTIVE")
}

enum ROLE_TYPE {
  REPRESENTATIVE @map("REPRESENTATIVE")
  CUSTOMER       @map("CUSTOMER")
}

enum OnboardingType {
  EMPLOYEE_SELF_ONBOARD_WITH_1_9 @map("EMPLOYEE_SELF_ONBOARD_WITH_1_9")
  EMPLOYEE_SELF_ONBOARD          @map("EMPLOYEE_SELF_ONBOARD")
  ENTER_ALL_THEIR_INFO_MYSELF    @map("ENTER_ALL_THEIR_INFO_MYSELF")
}

model documentation {
  id Int @id @default(autoincrement())

  documentationName String
  documentationSize String
  lastUpdate        String
  uploadedBy        String
  documentationURL  String

  createdBy Int?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model user {
  id           Int      @id @default(autoincrement())
  firstName    String?
  storeName    String?
  storeAddress String?
  email        String   @unique
  products     String?
  schedule     Boolean?
  photoUrl     String?
  password     String?

  isVerified Boolean @default(false)

  role      ROLE_TYPE @default(CUSTOMER)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  isOnline   Boolean?
  jobTitle   String?
  onlineFrom DateTime?
  onlineTo   DateTime?

  verifications    Verification[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")

  customerAppointments       Appointment[] @relation("CustomerAppointments")
  representativeAppointments Appointment[] @relation("RepresentativeAppointments")

  reviewsGiven    Review[] @relation("AuthorReviews")
  reviewsReceived Review[] @relation("TargetReviews")
}

model Verification {
  id        String   @id @default(cuid())
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int
  receiverId Int
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   user @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver user @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Appointment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Appointment scheduling
  date      DateTime
  startTime DateTime
  endTime   DateTime

  // Associations
  customerId Int
  customer   user @relation("CustomerAppointments", fields: [customerId], references: [id], onDelete: Cascade)

  representativeId Int
  representative   user @relation("RepresentativeAppointments", fields: [representativeId], references: [id], onDelete: Cascade)

  // Optional notes from user
  note String?

  // Status: pending, confirmed, canceled
  status AppointmentStatus @default(PENDING)

  // Whether user sent a chat request along with appointment
  chatRequested Boolean @default(false)
}

// Enum for appointment status
enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String
  userId    Int
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  rating    Int // 1 to 5
  comment   String
  createdAt DateTime @default(now())
  author    user     @relation("AuthorReviews", fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  target    user     @relation("TargetReviews", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  Int
}
